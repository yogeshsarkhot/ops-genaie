openapi: 3.0.0
info:
  title: CRUD API
  version: 1.0.0
  description: OpenAPI 3.0.0 specification for the CRUD APIs in this project.
servers:
  - url: http://localhost:8000
paths:
  /users:
    post:
      summary: Create or add a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
    get:
      summary: List users or search users by first name, last name, email or role
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
          required: false
        - in: query
          name: limit
          schema:
            type: integer
          required: false
        - in: query
          name: first_name
          schema:
            type: string
          required: false
          description: Filter users by first name (case-insensitive, substring match)
        - in: query
          name: last_name
          schema:
            type: string
          required: false
          description: Filter users by last name (case-insensitive, substring match)
        - in: query
          name: email
          schema:
            type: string
          required: false
          description: Filter users by email (case-insensitive, substring match)
        - in: query
          name: role
          schema:
            type: string
          required: false
          description: Filter users by role (case-insensitive, substring match)
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserOut'
  /users/{user_id}:
    get:
      summary: Get user by ID
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        '404':
          description: User not found
    put:
      summary: Update or modify user
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        '404':
          description: User not found
    delete:
      summary: Delete or remove user
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: User deleted
        '404':
          description: User not found
  /accounts:
    post:
      summary: Create or add a new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreate'
      responses:
        '201':
          description: Account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountInDB'
    get:
      summary: List accounts
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
          required: false
        - in: query
          name: limit
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountInDB'
  /accounts/{account_id}:
    get:
      summary: Get account by ID
      parameters:
        - in: path
          name: account_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Account found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountInDB'
        '404':
          description: Account not found
    put:
      summary: Update or modify account
      parameters:
        - in: path
          name: account_id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdate'
      responses:
        '200':
          description: Account updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountInDB'
        '404':
          description: Account not found
    delete:
      summary: Delete or remove account
      parameters:
        - in: path
          name: account_id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Account deleted
        '404':
          description: Account not found
  /policies:
    post:
      summary: Create a new policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyCreate'
      responses:
        '201':
          description: Policy created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyInDB'
    get:
      summary: List policies
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
          required: false
        - in: query
          name: limit
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: List of policies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyInDB'
  /policies/{policy_id}:
    get:
      summary: Get policy by ID
      parameters:
        - in: path
          name: policy_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Policy found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyInDB'
        '404':
          description: Policy not found
    put:
      summary: Update policy
      parameters:
        - in: path
          name: policy_id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyUpdate'
      responses:
        '200':
          description: Policy updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyInDB'
        '404':
          description: Policy not found
    delete:
      summary: Delete policy
      parameters:
        - in: path
          name: policy_id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Policy deleted
        '404':
          description: Policy not found
  /courses:
    post:
      summary: Create a new course
      description: Create a new course with the provided details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreate'
      responses:
        '201':
          description: Course successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseInDB'
    get:
      summary: List courses
      description: Retrieve a list of all courses.
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
          required: false
          description: Number of items to skip for pagination.
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Maximum number of items to return.
      responses:
        '200':
          description: List of courses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseInDB'
  /courses/{course_id}:
    get:
      summary: Get course by ID
      description: Retrieve a course by its unique ID.
      parameters:
        - in: path
          name: course_id
          schema:
            type: integer
          required: true
          description: Unique identifier of the course.
      responses:
        '200':
          description: Course found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseInDB'
        '404':
          description: Course not found.
    put:
      summary: Update course
      description: Update the details of an existing course by its ID.
      parameters:
        - in: path
          name: course_id
          schema:
            type: integer
          required: true
          description: Unique identifier of the course.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseUpdate'
      responses:
        '200':
          description: Course updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseInDB'
        '404':
          description: Course not found.
    delete:
      summary: Delete course
      description: Delete a course by its unique ID.
      parameters:
        - in: path
          name: course_id
          schema:
            type: integer
          required: true
          description: Unique identifier of the course.
      responses:
        '204':
          description: Course deleted successfully.
        '404':
          description: Course not found.
  /batches:
    post:
      summary: Create a new batch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreate'
      responses:
        '201':
          description: Batch created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchInDB'
    get:
      summary: List batches
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
          required: false
        - in: query
          name: limit
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: List of batches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BatchInDB'
  /batches/{batch_id}:
    get:
      summary: Get batch by ID
      parameters:
        - in: path
          name: batch_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Batch found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchInDB'
        '404':
          description: Batch not found
    put:
      summary: Update batch
      parameters:
        - in: path
          name: batch_id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpdate'
      responses:
        '200':
          description: Batch updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchInDB'
        '404':
          description: Batch not found
    delete:
      summary: Delete batch
      parameters:
        - in: path
          name: batch_id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Batch deleted
        '404':
          description: Batch not found
  /guarding_student_mappings:
    post:
      summary: Create a new guarding-student mapping
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuardingStudentMappingCreate'
      responses:
        '201':
          description: Mapping created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardingStudentMappingInDB'
    get:
      summary: List guarding-student mappings
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
          required: false
        - in: query
          name: limit
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: List of mappings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GuardingStudentMappingInDB'
  /guarding_student_mappings/{mapping_id}:
    get:
      summary: Get mapping by ID
      parameters:
        - in: path
          name: mapping_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Mapping found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardingStudentMappingInDB'
        '404':
          description: Mapping not found
    put:
      summary: Update mapping
      parameters:
        - in: path
          name: mapping_id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuardingStudentMappingUpdate'
      responses:
        '200':
          description: Mapping updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardingStudentMappingInDB'
        '404':
          description: Mapping not found
    delete:
      summary: Delete mapping
      parameters:
        - in: path
          name: mapping_id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Mapping deleted
        '404':
          description: Mapping not found
  /batch_sessions:
    post:
      summary: Create a new batch session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchSessionCreate'
      responses:
        '201':
          description: Batch session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSessionInDB'
    get:
      summary: List batch sessions
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
          required: false
        - in: query
          name: limit
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: List of batch sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BatchSessionInDB'
  /batch_sessions/{session_id}:
    get:
      summary: Get batch session by ID
      parameters:
        - in: path
          name: session_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Batch session found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSessionInDB'
        '404':
          description: Batch session not found
    put:
      summary: Update batch session
      parameters:
        - in: path
          name: session_id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchSessionUpdate'
      responses:
        '200':
          description: Batch session updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSessionInDB'
        '404':
          description: Batch session not found
    delete:
      summary: Delete batch session
      parameters:
        - in: path
          name: session_id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Batch session deleted
        '404':
          description: Batch session not found
components:
  schemas:
    UserRole:
      type: string
      enum: [admin, teacher, guardian, student]
    UserBase:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        role:
          $ref: '#/components/schemas/UserRole'
      required: [first_name, last_name, email, role]
    UserCreate:
      allOf:
        - $ref: '#/components/schemas/UserBase'
    UserUpdate:
      allOf:
        - $ref: '#/components/schemas/UserBase'
    UserOut:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            user_id:
              type: integer
    AccountBase:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        address_line1:
          type: string
          minLength: 1
          maxLength: 200
        address_line2:
          type: string
          maxLength: 200
        city:
          type: string
          minLength: 2
          maxLength: 100
        state:
          type: string
          minLength: 2
          maxLength: 50
        zip_code:
          type: string
          pattern: '^\\d{5}(-\\d{4})?$'
      required: [name, address_line1, city, state, zip_code]
    AccountCreate:
      allOf:
        - $ref: '#/components/schemas/AccountBase'
    AccountUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        address_line1:
          type: string
          minLength: 1
          maxLength: 200
        address_line2:
          type: string
          maxLength: 200
        city:
          type: string
          minLength: 2
          maxLength: 100
        state:
          type: string
          minLength: 2
          maxLength: 50
        zip_code:
          type: string
          pattern: '^\\d{5}(-\\d{4})?$'
    AccountInDB:
      allOf:
        - $ref: '#/components/schemas/AccountBase'
        - type: object
          properties:
            id:
              type: integer
    PolicyBase:
      type: object
      properties:
        effective_date:
          type: string
          format: date
        expiration_date:
          type: string
          format: date
        premium:
          type: number
          format: float
          minimum: 0
        account_id:
          type: integer
      required: [effective_date, expiration_date, premium, account_id]
    PolicyCreate:
      allOf:
        - $ref: '#/components/schemas/PolicyBase'
    PolicyUpdate:
      type: object
      properties:
        effective_date:
          type: string
          format: date
        expiration_date:
          type: string
          format: date
        premium:
          type: number
          format: float
          minimum: 0
        account_id:
          type: integer
    PolicyInDB:
      allOf:
        - $ref: '#/components/schemas/PolicyBase'
        - type: object
          properties:
            id:
              type: integer
    CourseBase:
      type: object
      properties:
        name:
          type: string
          description: Name of the course.
        description:
          type: string
          description: Detailed description of the course.
      required: [name]
      description: Base schema for a course.
    CourseCreate:
      allOf:
        - $ref: '#/components/schemas/CourseBase'
      description: Schema for creating a new course.
    CourseUpdate:
      allOf:
        - $ref: '#/components/schemas/CourseBase'
      description: Schema for updating an existing course.
    CourseInDB:
      allOf:
        - $ref: '#/components/schemas/CourseBase'
        - type: object
          properties:
            id:
              type: integer
              description: Unique identifier for the course.
      description: Schema representing a course stored in the database.
    BatchBase:
      type: object
      properties:
        name:
          type: string
        course_id:
          type: integer
      required: [name, course_id]
    BatchCreate:
      allOf:
        - $ref: '#/components/schemas/BatchBase'
    BatchUpdate:
      allOf:
        - $ref: '#/components/schemas/BatchBase'
    BatchInDB:
      allOf:
        - $ref: '#/components/schemas/BatchBase'
        - type: object
          properties:
            id:
              type: integer
    GuardingStudentMappingBase:
      type: object
      properties:
        guardian_id:
          type: integer
        student_id:
          type: integer
      required: [guardian_id, student_id]
    GuardingStudentMappingCreate:
      allOf:
        - $ref: '#/components/schemas/GuardingStudentMappingBase'
    GuardingStudentMappingUpdate:
      allOf:
        - $ref: '#/components/schemas/GuardingStudentMappingBase'
    GuardingStudentMappingInDB:
      allOf:
        - $ref: '#/components/schemas/GuardingStudentMappingBase'
        - type: object
          properties:
            id:
              type: integer
    BatchSessionBase:
      type: object
      properties:
        batch_id:
          type: integer
        session_date:
          type: string
          format: date
        topic:
          type: string
      required: [batch_id, session_date, topic]
    BatchSessionCreate:
      allOf:
        - $ref: '#/components/schemas/BatchSessionBase'
    BatchSessionUpdate:
      allOf:
        - $ref: '#/components/schemas/BatchSessionBase'
    BatchSessionInDB:
      allOf:
        - $ref: '#/components/schemas/BatchSessionBase'
        - type: object
          properties:
            id:
              type: integer